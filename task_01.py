# -*- coding: utf-8 -*-
"""TASK - 01.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Z7752PfN8kgpvQO-hT5ioKytbF1_sleg

#Done By : Ashlesha Borkar

#TASK 01 : Prediction Using Supervised Machine Learning (Level : Beginner)

Introduction :
Predicting student performance based on study hours is a classic introductory task for learning supervised machine learning, specifically linear regression. Machine learning is a powerful tool for predictive analytics, and one of the simplest yet most illustrative applications is predicting student performance based on study hours.

In this guide, we'll walk through the steps to build a simple linear regression model to predict student scores using Python.

Objective :
The objective of this task is to predict the percentage score of a student based on the number of hours they study. This is a simple linear regression problem involving two variables: "study hours" and "percentage scores".

STEPS TO COMPLETE THIS TASK -
"""

# STEP 1 : Import all the necessary libraries required -

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# STEP 2 : Reading and loading the data -

data_url = 'http://bit.ly/w-data'
data = pd.read_csv(data_url)

data.head(10)

# STEP 3 : Check for missing values -
print(data.isnull().sum())

"""Observations - There are No missing values in this dataset.

Next step plot the data points.

Note : Plotting the data points allows you to visually inspect the dataset and see if there appears to be any relationship between the variables.
It also helps you understand the data before applying any statistical or machine learning models.
"""

# Commented out IPython magic to ensure Python compatibility.
# STEP 4 : Plot data points -

# %matplotlib inline
plt.scatter(data['Hours'], data['Scores'], color='blue')
plt.title('Study Hours vs Percentage Score')
plt.xlabel('Hours Studied')
plt.ylabel('Percentage Score')
plt.show()

"""Key Observations from the above graph :

a. The scatter plot shows a **positive correlation** between study hours and percentage scores. As the number of hours studied increases, the percentage score also tends to increase.

b. The data points appear to follow a **linear trend**, suggesting that a **linear regression model** would be appropriate to describe this relationship.

c. There are **no significant outliers** in the data, which suggests that the relationship is consistent across different study hours.
"""

# STEP 5 - Splitting data in Train and Test sets :

X = data[['Hours']]
y = data['Scores']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# STEP 6 - Model Building - Create and train the model :

model = LinearRegression()
model.fit(X_train, y_train)

# STEP 7 - Plot Regression Line :

plt.scatter(data['Hours'], data['Scores'], color='blue')  # Data points
plt.plot(X, model.predict(X), color='red')  # Regression line
plt.title('Study Hours vs Percentage Score with Regression Line')
plt.xlabel('Hours Studied')
plt.ylabel('Percentage Score')
plt.show()

"""Key Observations from the above graph :

The red line represents the fitted linear regression model. It shows the best fit line that minimizes the distance between the observed data points and the predicted values. It accurately captures the upward trend in the data, indicating that the model is a good fit for the data.
"""

# STEP 8 - Predict test results :

y_pred = model.predict(X_test)
print(X_test)

"""Next step compare the Actual vs the Predicted values.

Note : This comparison allows you to assess how accurately your model is making predictions. This helps in understanding the model's performance on both the training data and any new, unseen data.
"""

# STEP 9 - Comparing Actual vs Predicted :

df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
df

"""Next step let us make predictions.

Let's use our trained model to predict the score for a student who studies for 9.25 hours/day.
"""

# STEP 10 - Predict the score :

hours = np.array([[9.25]])
my_pred = model.predict(hours)
print("No of Hours = {}".format(hours[0][0]))
print("Predicted Score = {:.2f}".format(my_pred[0]))

# STEP 11 - Evaluate the model performance using Mean Squared Error (MSE) :

mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error: {mse:.2f}")

"""Key Observations on the performance of the model -

a. An MSE of 21.60 indicates that, on average, the squared difference between the actual and predicted values is 21.60.

b. It also suggests that the model has a certain level of error in its predictions.

c. Lower MSE values indicate better model performance, as the predictions are closer to the actual values.
"""